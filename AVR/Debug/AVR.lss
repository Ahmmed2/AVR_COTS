
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800060  00800060  00000ea4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a69  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001344  00000000  00000000  00004e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028b7  00000000  00000000  00006165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e7c  00000000  00000000  00008a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001324  00000000  00000000  00009898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035cc  00000000  00000000  0000abbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0000e188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_1>
   8:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_2>
   c:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_3>
  10:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_4>
  14:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_5>
  18:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_6>
  1c:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_7>
  20:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__vector_8>
  24:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_9>
  28:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_10>
  2c:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_11>
  30:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_12>
  34:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__vector_13>
  38:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_14>
  3c:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_15>
  40:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 02 	call	0x50e	; 0x50e <main>
  8a:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_voidInit>:
	_delay_ms(8) ;
	

	return Local_u8RxValue ;
	
}
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_voidInitMaster>
  98:	08 95       	ret

0000009a <EEPROM_voidWritePage>:


void EEPROM_voidWritePage(u16 Copy_u16WordAddress , u8 Copy_u8Data[],u8 Copy_u8Size)
{
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	c8 2f       	mov	r28, r24
  a6:	8b 01       	movw	r16, r22
  a8:	d4 2f       	mov	r29, r20
	// Hex 50 ---> 0b01010000  , MSB is don't Care
	u8 Local_u8Temp = (EEPROM_CHIP_ADDRESS) | (Copy_u16WordAddress>>8) ;
  aa:	90 65       	ori	r25, 0x50	; 80
  ac:	f9 2e       	mov	r15, r25
	/* Frame Sequence */
	// Send Start Condition
	TWI_voidStartCondition () ;
  ae:	0e 94 15 06 	call	0xc2a	; 0xc2a <TWI_voidStartCondition>
	// Send Slave Address
	TWI_voidSendSlaveAdressWithWrite(Local_u8Temp) ;
  b2:	8f 2d       	mov	r24, r15
  b4:	0e 94 38 06 	call	0xc70	; 0xc70 <TWI_voidSendSlaveAdressWithWrite>
	// Send Word Address
	TWI_voidSendMasterDataByte((u8)Copy_u16WordAddress) ;
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 62 06 	call	0xcc4	; 0xcc4 <TWI_voidSendMasterDataByte>
	
	for (u8 Local_u8LoopCounter = 0 ;Local_u8LoopCounter<Copy_u8Size ;Local_u8LoopCounter++ )
  be:	c0 e0       	ldi	r28, 0x00	; 0
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <EEPROM_voidWritePage+0x36>
	{
		
		// Send Byte Data
		TWI_voidSendMasterDataByte(Copy_u8Data[Local_u8LoopCounter]) ;
  c2:	f8 01       	movw	r30, r16
  c4:	ec 0f       	add	r30, r28
  c6:	f1 1d       	adc	r31, r1
  c8:	80 81       	ld	r24, Z
  ca:	0e 94 62 06 	call	0xcc4	; 0xcc4 <TWI_voidSendMasterDataByte>
	// Send Slave Address
	TWI_voidSendSlaveAdressWithWrite(Local_u8Temp) ;
	// Send Word Address
	TWI_voidSendMasterDataByte((u8)Copy_u16WordAddress) ;
	
	for (u8 Local_u8LoopCounter = 0 ;Local_u8LoopCounter<Copy_u8Size ;Local_u8LoopCounter++ )
  ce:	cf 5f       	subi	r28, 0xFF	; 255
  d0:	cd 17       	cp	r28, r29
  d2:	b8 f3       	brcs	.-18     	; 0xc2 <EEPROM_voidWritePage+0x28>
		TWI_voidSendMasterDataByte(Copy_u8Data[Local_u8LoopCounter]) ;
		
	}

	// Send Stop Condition
	TWI_voidStopCondition() ;
  d4:	0e 94 31 06 	call	0xc62	; 0xc62 <TWI_voidStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9c e9       	ldi	r25, 0x9C	; 156
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <EEPROM_voidWritePage+0x42>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <EEPROM_voidWritePage+0x48>
  e2:	00 00       	nop
	_delay_ms(10) ;
	
	

	
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	08 95       	ret

000000f0 <EEPROM_voidReadPage>:

void EEPROM_voidReadPage(u16 Copy_u16WordAddress , u8 Copy_u8Data[],u8 Copy_u8Size)
{
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	f8 2e       	mov	r15, r24
  fe:	8b 01       	movw	r16, r22
 100:	d4 2f       	mov	r29, r20
		// Hex 50 ---> 0b01010000  , MSB is don't Care
		u8 Local_u8Temp = (EEPROM_CHIP_ADDRESS) | (Copy_u16WordAddress>>8) ;
 102:	c9 2f       	mov	r28, r25
 104:	c0 65       	ori	r28, 0x50	; 80
		/* Frame Sequence */
		// Send Start Condition
		TWI_voidStartCondition () ;
 106:	0e 94 15 06 	call	0xc2a	; 0xc2a <TWI_voidStartCondition>
		// Send Slave Address with Read
		TWI_voidSendSlaveAdressWithWrite(Local_u8Temp) ;
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 38 06 	call	0xc70	; 0xc70 <TWI_voidSendSlaveAdressWithWrite>
		// Send Word Address
		TWI_voidSendMasterDataByte((u8)Copy_u16WordAddress) ;
 110:	8f 2d       	mov	r24, r15
 112:	0e 94 62 06 	call	0xcc4	; 0xcc4 <TWI_voidSendMasterDataByte>
		//Repeated Start
		TWI_voidRepeatedStartCondition() ;
 116:	0e 94 23 06 	call	0xc46	; 0xc46 <TWI_voidRepeatedStartCondition>
		//Send Slave Address with read
		TWI_voidSendSlaveAdressWithRead(Local_u8Temp) ;
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TWI_voidSendSlaveAdressWithRead>
		
	for (u8 Local_u8LoopCounter = 0 ;Local_u8LoopCounter<Copy_u8Size ;Local_u8LoopCounter++ )
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	12 c0       	rjmp	.+36     	; 0x148 <EEPROM_voidReadPage+0x58>
	{
		if (Local_u8LoopCounter == Copy_u8Size-1 )
 124:	2c 2f       	mov	r18, r28
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	8d 2f       	mov	r24, r29
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	28 17       	cp	r18, r24
 130:	39 07       	cpc	r19, r25
 132:	11 f4       	brne	.+4      	; 0x138 <EEPROM_voidReadPage+0x48>
		{
			TWI_voidReadNONACK() ;
 134:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <TWI_voidReadNONACK>
		}
		//Receive Data
		Copy_u8Data[Local_u8LoopCounter] = TWI_voidReceiveMasterDataByte () ;
 138:	78 01       	movw	r14, r16
 13a:	ec 0e       	add	r14, r28
 13c:	f1 1c       	adc	r15, r1
 13e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <TWI_voidReceiveMasterDataByte>
 142:	f7 01       	movw	r30, r14
 144:	80 83       	st	Z, r24
		//Repeated Start
		TWI_voidRepeatedStartCondition() ;
		//Send Slave Address with read
		TWI_voidSendSlaveAdressWithRead(Local_u8Temp) ;
		
	for (u8 Local_u8LoopCounter = 0 ;Local_u8LoopCounter<Copy_u8Size ;Local_u8LoopCounter++ )
 146:	cf 5f       	subi	r28, 0xFF	; 255
 148:	cd 17       	cp	r28, r29
 14a:	60 f3       	brcs	.-40     	; 0x124 <EEPROM_voidReadPage+0x34>
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	9c e9       	ldi	r25, 0x9C	; 156
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <EEPROM_voidReadPage+0x60>
 154:	00 c0       	rjmp	.+0      	; 0x156 <EEPROM_voidReadPage+0x66>
 156:	00 00       	nop
		Copy_u8Data[Local_u8LoopCounter] = TWI_voidReceiveMasterDataByte () ;
	}
		_delay_ms(10);
	
		//Send Stop Condition
		TWI_voidStopCondition() ;
 158:	0e 94 31 06 	call	0xc62	; 0xc62 <TWI_voidStopCondition>
 15c:	ef e3       	ldi	r30, 0x3F	; 63
 15e:	fc e9       	ldi	r31, 0x9C	; 156
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <EEPROM_voidReadPage+0x70>
 164:	00 c0       	rjmp	.+0      	; 0x166 <EEPROM_voidReadPage+0x76>
 166:	00 00       	nop
		/* Self Time Delay */
		_delay_ms(10) ;
		
		TWI_voidReadACK() ;
 168:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_voidReadACK>
	
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <EEPROM_u8Search>:

u8 EEPROM_u8Search (u8 Copy_u8Pass[] , u8 Copy_u8UsersNum)
{
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <EEPROM_u8Search+0x10>
 18a:	00 d0       	rcall	.+0      	; 0x18c <EEPROM_u8Search+0x12>
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	8c 01       	movw	r16, r24
 192:	d6 2e       	mov	r13, r22
	
	u8 Local_u8Counter1, Local_u8Counter2 , Local_u8ReturnValue ;
	u8 Local_u8CompareFlag = 0 ;
 194:	f1 2c       	mov	r15, r1
	u8 EEPROM_Pass[4] ;
	
	for (Local_u8Counter1 = 0 ; Local_u8Counter1 <Copy_u8UsersNum ; Local_u8Counter1++ )
 196:	e1 2c       	mov	r14, r1
 198:	22 c0       	rjmp	.+68     	; 0x1de <EEPROM_u8Search+0x64>
	{
		EEPROM_voidReadPage ( (0x0000 + Local_u8Counter1*4) , EEPROM_Pass ,3 ) ;
 19a:	8e 2d       	mov	r24, r14
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	43 e0       	ldi	r20, 0x03	; 3
 1a0:	be 01       	movw	r22, r28
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0e 94 78 00 	call	0xf0	; 0xf0 <EEPROM_voidReadPage>
		for (Local_u8Counter2 = 0 ; Local_u8Counter2 < 3 ; Local_u8Counter2 ++)
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <EEPROM_u8Search+0x5e>
		{
			if (Copy_u8Pass[Local_u8Counter2] == EEPROM_Pass [Local_u8Counter2])
 1b6:	82 2f       	mov	r24, r18
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	f8 01       	movw	r30, r16
 1bc:	e8 0f       	add	r30, r24
 1be:	f9 1f       	adc	r31, r25
 1c0:	30 81       	ld	r19, Z
 1c2:	e1 e0       	ldi	r30, 0x01	; 1
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ec 0f       	add	r30, r28
 1c8:	fd 1f       	adc	r31, r29
 1ca:	e8 0f       	add	r30, r24
 1cc:	f9 1f       	adc	r31, r25
 1ce:	80 81       	ld	r24, Z
 1d0:	38 13       	cpse	r19, r24
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <EEPROM_u8Search+0x62>
			{
				Local_u8CompareFlag ++ ;
 1d4:	f3 94       	inc	r15
	u8 EEPROM_Pass[4] ;
	
	for (Local_u8Counter1 = 0 ; Local_u8Counter1 <Copy_u8UsersNum ; Local_u8Counter1++ )
	{
		EEPROM_voidReadPage ( (0x0000 + Local_u8Counter1*4) , EEPROM_Pass ,3 ) ;
		for (Local_u8Counter2 = 0 ; Local_u8Counter2 < 3 ; Local_u8Counter2 ++)
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	23 30       	cpi	r18, 0x03	; 3
 1da:	68 f3       	brcs	.-38     	; 0x1b6 <EEPROM_u8Search+0x3c>
	
	u8 Local_u8Counter1, Local_u8Counter2 , Local_u8ReturnValue ;
	u8 Local_u8CompareFlag = 0 ;
	u8 EEPROM_Pass[4] ;
	
	for (Local_u8Counter1 = 0 ; Local_u8Counter1 <Copy_u8UsersNum ; Local_u8Counter1++ )
 1dc:	e3 94       	inc	r14
 1de:	ed 14       	cp	r14, r13
 1e0:	e0 f2       	brcs	.-72     	; 0x19a <EEPROM_u8Search+0x20>
			}
			else break ;
		}
		
	}
	if (Local_u8CompareFlag == 3)
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	f8 12       	cpse	r15, r24
	{
		Local_u8ReturnValue = Local_u8Counter1 ;
	}
	else Local_u8ReturnValue = 256 ;
 1e6:	e1 2c       	mov	r14, r1
	
	return Local_u8ReturnValue ;
	
 1e8:	8e 2d       	mov	r24, r14
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	08 95       	ret

00000202 <LCD_voidEnable_4L>:
	else if (Copy_u8ShifttingDirection == DISPLAY_RIGHT)
	{
		LCD_voidWriteCommand_4L(SHIFTING_ENTIRE_DISPLAY_R);
	}
	
}
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 20c:	87 ec       	ldi	r24, 0xC7	; 199
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_voidEnable_4L+0xe>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_voidEnable_4L+0x14>
 216:	00 00       	nop
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 222:	08 95       	ret

00000224 <LCD_voidWriteCommand_4L>:
 224:	cf 93       	push	r28
 226:	c8 2f       	mov	r28, r24
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 232:	c3 fb       	bst	r28, 3
 234:	44 27       	eor	r20, r20
 236:	40 f9       	bld	r20, 0
 238:	64 e0       	ldi	r22, 0x04	; 4
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 240:	c2 fb       	bst	r28, 2
 242:	44 27       	eor	r20, r20
 244:	40 f9       	bld	r20, 0
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 24e:	c1 fb       	bst	r28, 1
 250:	44 27       	eor	r20, r20
 252:	40 f9       	bld	r20, 0
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 25c:	4c 2f       	mov	r20, r28
 25e:	41 70       	andi	r20, 0x01	; 1
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 268:	0e 94 01 01 	call	0x202	; 0x202 <LCD_voidEnable_4L>
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <LCD_voidInit>:
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 32 03 	call	0x664	; 0x664 <DIO_voidSetPinDirection>
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 32 03 	call	0x664	; 0x664 <DIO_voidSetPinDirection>
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 32 03 	call	0x664	; 0x664 <DIO_voidSetPinDirection>
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 32 03 	call	0x664	; 0x664 <DIO_voidSetPinDirection>
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 32 03 	call	0x664	; 0x664 <DIO_voidSetPinDirection>
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 32 03 	call	0x664	; 0x664 <DIO_voidSetPinDirection>
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	80 e7       	ldi	r24, 0x70	; 112
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <LCD_voidInit+0x42>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_voidInit+0x4c>
 2bc:	00 00       	nop
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 2d0:	87 ec       	ldi	r24, 0xC7	; 199
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_voidInit+0x64>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_voidInit+0x6a>
 2da:	00 00       	nop
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 2e8:	87 ec       	ldi	r24, 0xC7	; 199
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_voidInit+0x7c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_voidInit+0x82>
 2f2:	00 00       	nop
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 300:	8f e3       	ldi	r24, 0x3F	; 63
 302:	9f e1       	ldi	r25, 0x1F	; 31
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_voidInit+0x94>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_voidInit+0x9a>
 30a:	00 00       	nop
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 318:	08 95       	ret

0000031a <LCD_voidWrite_Data_4L>:
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	18 2f       	mov	r17, r24
 322:	c8 2f       	mov	r28, r24
 324:	c2 95       	swap	r28
 326:	cf 70       	andi	r28, 0x0F	; 15
 328:	d0 e0       	ldi	r29, 0x00	; 0
 32a:	24 c0       	rjmp	.+72     	; 0x374 <LCD_voidWrite_Data_4L+0x5a>
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	63 e0       	ldi	r22, 0x03	; 3
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 336:	c3 fb       	bst	r28, 3
 338:	44 27       	eor	r20, r20
 33a:	40 f9       	bld	r20, 0
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 344:	c2 fb       	bst	r28, 2
 346:	44 27       	eor	r20, r20
 348:	40 f9       	bld	r20, 0
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 352:	c1 fb       	bst	r28, 1
 354:	44 27       	eor	r20, r20
 356:	40 f9       	bld	r20, 0
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 360:	4c 2f       	mov	r20, r28
 362:	41 70       	andi	r20, 0x01	; 1
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 a2 03 	call	0x744	; 0x744 <DIO_voidSetPinValue>
 36c:	0e 94 01 01 	call	0x202	; 0x202 <LCD_voidEnable_4L>
 370:	df 5f       	subi	r29, 0xFF	; 255
 372:	c1 2f       	mov	r28, r17
 374:	d2 30       	cpi	r29, 0x02	; 2
 376:	d0 f2       	brcs	.-76     	; 0x32c <LCD_voidWrite_Data_4L+0x12>
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	08 95       	ret

00000380 <LCD_voidSendDATA_4L>:
 380:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_voidWrite_Data_4L>
 384:	08 95       	ret

00000386 <LCD_GoToXY>:
 386:	cf 93       	push	r28
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <LCD_GoToXY+0x1c>
 38c:	c0 e8       	ldi	r28, 0x80	; 128
 38e:	c6 0f       	add	r28, r22
 390:	8c 2f       	mov	r24, r28
 392:	82 95       	swap	r24
 394:	8f 70       	andi	r24, 0x0F	; 15
 396:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 39a:	8c 2f       	mov	r24, r28
 39c:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 3a0:	26 c0       	rjmp	.+76     	; 0x3ee <LCD_GoToXY+0x68>
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	59 f4       	brne	.+22     	; 0x3bc <LCD_GoToXY+0x36>
 3a6:	c0 ec       	ldi	r28, 0xC0	; 192
 3a8:	c6 0f       	add	r28, r22
 3aa:	8c 2f       	mov	r24, r28
 3ac:	82 95       	swap	r24
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 3b4:	8c 2f       	mov	r24, r28
 3b6:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 3ba:	19 c0       	rjmp	.+50     	; 0x3ee <LCD_GoToXY+0x68>
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	59 f4       	brne	.+22     	; 0x3d6 <LCD_GoToXY+0x50>
 3c0:	c4 e9       	ldi	r28, 0x94	; 148
 3c2:	c6 0f       	add	r28, r22
 3c4:	8c 2f       	mov	r24, r28
 3c6:	82 95       	swap	r24
 3c8:	8f 70       	andi	r24, 0x0F	; 15
 3ca:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 3d4:	0c c0       	rjmp	.+24     	; 0x3ee <LCD_GoToXY+0x68>
 3d6:	84 30       	cpi	r24, 0x04	; 4
 3d8:	51 f4       	brne	.+20     	; 0x3ee <LCD_GoToXY+0x68>
 3da:	c4 ed       	ldi	r28, 0xD4	; 212
 3dc:	c6 0f       	add	r28, r22
 3de:	8c 2f       	mov	r24, r28
 3e0:	82 95       	swap	r24
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 3e8:	8c 2f       	mov	r24, r28
 3ea:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <LCD_voidWriteSting>:
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	7c 01       	movw	r14, r24
 400:	d6 2f       	mov	r29, r22
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	09 c0       	rjmp	.+18     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 406:	6c 2f       	mov	r22, r28
 408:	8d 2f       	mov	r24, r29
 40a:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_GoToXY>
 40e:	f8 01       	movw	r30, r16
 410:	80 81       	ld	r24, Z
 412:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_voidSendDATA_4L>
 416:	cf 5f       	subi	r28, 0xFF	; 255
 418:	87 01       	movw	r16, r14
 41a:	0c 0f       	add	r16, r28
 41c:	11 1d       	adc	r17, r1
 41e:	f8 01       	movw	r30, r16
 420:	80 81       	ld	r24, Z
 422:	81 11       	cpse	r24, r1
 424:	f0 cf       	rjmp	.-32     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	08 95       	ret

00000434 <LCD_voidDisplayNumber>:
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	c0 59       	subi	r28, 0x90	; 144
 448:	d1 40       	sbci	r29, 0x01	; 1
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	9b 01       	movw	r18, r22
 456:	ac 01       	movw	r20, r24
 458:	67 2b       	or	r22, r23
 45a:	68 2b       	or	r22, r24
 45c:	69 2b       	or	r22, r25
 45e:	31 f5       	brne	.+76     	; 0x4ac <LCD_voidDisplayNumber+0x78>
 460:	80 e3       	ldi	r24, 0x30	; 48
 462:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_voidSendDATA_4L>
 466:	3d c0       	rjmp	.+122    	; 0x4e2 <LCD_voidDisplayNumber+0xae>
 468:	ca 01       	movw	r24, r20
 46a:	b9 01       	movw	r22, r18
 46c:	2a e0       	ldi	r18, 0x0A	; 10
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	0e 94 f4 06 	call	0xde8	; 0xde8 <__udivmodsi4>
 478:	f6 01       	movw	r30, r12
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	a1 e0       	ldi	r26, 0x01	; 1
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	ac 0f       	add	r26, r28
 488:	bd 1f       	adc	r27, r29
 48a:	ea 0f       	add	r30, r26
 48c:	fb 1f       	adc	r31, r27
 48e:	dc 01       	movw	r26, r24
 490:	cb 01       	movw	r24, r22
 492:	99 27       	eor	r25, r25
 494:	aa 27       	eor	r26, r26
 496:	bb 27       	eor	r27, r27
 498:	80 83       	st	Z, r24
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	a2 83       	std	Z+2, r26	; 0x02
 49e:	b3 83       	std	Z+3, r27	; 0x03
 4a0:	bf ef       	ldi	r27, 0xFF	; 255
 4a2:	cb 1a       	sub	r12, r27
 4a4:	db 0a       	sbc	r13, r27
 4a6:	eb 0a       	sbc	r14, r27
 4a8:	fb 0a       	sbc	r15, r27
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <LCD_voidDisplayNumber+0x7e>
 4ac:	c1 2c       	mov	r12, r1
 4ae:	d1 2c       	mov	r13, r1
 4b0:	76 01       	movw	r14, r12
 4b2:	21 15       	cp	r18, r1
 4b4:	31 05       	cpc	r19, r1
 4b6:	41 05       	cpc	r20, r1
 4b8:	51 05       	cpc	r21, r1
 4ba:	b1 f6       	brne	.-84     	; 0x468 <LCD_voidDisplayNumber+0x34>
 4bc:	1f ef       	ldi	r17, 0xFF	; 255
 4be:	1c 0d       	add	r17, r12
 4c0:	0e c0       	rjmp	.+28     	; 0x4de <LCD_voidDisplayNumber+0xaa>
 4c2:	e1 e0       	ldi	r30, 0x01	; 1
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	ec 0f       	add	r30, r28
 4c8:	fd 1f       	adc	r31, r29
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	18 02       	muls	r17, r24
 4ce:	e0 0d       	add	r30, r0
 4d0:	f1 1d       	adc	r31, r1
 4d2:	11 24       	eor	r1, r1
 4d4:	80 81       	ld	r24, Z
 4d6:	80 5d       	subi	r24, 0xD0	; 208
 4d8:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_voidSendDATA_4L>
 4dc:	11 50       	subi	r17, 0x01	; 1
 4de:	11 23       	and	r17, r17
 4e0:	84 f7       	brge	.-32     	; 0x4c2 <LCD_voidDisplayNumber+0x8e>
 4e2:	c0 57       	subi	r28, 0x70	; 112
 4e4:	de 4f       	sbci	r29, 0xFE	; 254
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	08 95       	ret

00000500 <LCD_voidClear>:
	LCD_voidWriteCommand_8L(CLR_LCD);
	
	
	
#elif LCD_Type==Four_BIT
	LCD_voidWriteCommand_4L(CLR_LCD_H);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
	LCD_voidWriteCommand_4L(CLR_LCD_L);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 12 01 	call	0x224	; 0x224 <LCD_voidWriteCommand_4L>
 50c:	08 95       	ret

0000050e <main>:
u8	ADC_Group [8] ;	
u16 ADC_Result[8]={0} ; 
	
	
int main(void)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	60 97       	sbiw	r28, 0x10	; 16
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
	*/
									/* EEPROM Test by writing page */
	


	DIO_voidSetPinDirection(GREEN_PORT,GREEN_PIN,PIN_OUTPUT_ID);
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	64 e0       	ldi	r22, 0x04	; 4
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 32 03 	call	0x664	; 0x664 <DIO_voidSetPinDirection>
							
	EEPROM_voidInit()  ; 
 52c:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_voidInit>
	LCD_voidInit() ; 
 530:	0e 94 38 01 	call	0x270	; 0x270 <LCD_voidInit>
	
	u8 Copy_u8Data[4] = "ABC" ;
 534:	21 e4       	ldi	r18, 0x41	; 65
 536:	32 e4       	ldi	r19, 0x42	; 66
 538:	3a 83       	std	Y+2, r19	; 0x02
 53a:	29 83       	std	Y+1, r18	; 0x01
 53c:	83 e4       	ldi	r24, 0x43	; 67
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	9c 83       	std	Y+4, r25	; 0x04
 542:	8b 83       	std	Y+3, r24	; 0x03
	u8 Copy_u8Data2[4] = "EFG" ;
 544:	45 e4       	ldi	r20, 0x45	; 69
 546:	56 e4       	ldi	r21, 0x46	; 70
 548:	5e 83       	std	Y+6, r21	; 0x06
 54a:	4d 83       	std	Y+5, r20	; 0x05
 54c:	47 e4       	ldi	r20, 0x47	; 71
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	58 87       	std	Y+8, r21	; 0x08
 552:	4f 83       	std	Y+7, r20	; 0x07
    u8 Copy_u8Rx[4] = {0} ;
 554:	19 86       	std	Y+9, r1	; 0x09
 556:	1a 86       	std	Y+10, r1	; 0x0a
 558:	1b 86       	std	Y+11, r1	; 0x0b
 55a:	1c 86       	std	Y+12, r1	; 0x0c
	u8 Rx[4] = "ABC" ;	
 55c:	3e 87       	std	Y+14, r19	; 0x0e
 55e:	2d 87       	std	Y+13, r18	; 0x0d
 560:	98 8b       	std	Y+16, r25	; 0x10
 562:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Return_Value = 0 ;

	EEPROM_voidWritePage(0x0000 , Copy_u8Data2 ,4  ) ;
 564:	44 e0       	ldi	r20, 0x04	; 4
 566:	be 01       	movw	r22, r28
 568:	6b 5f       	subi	r22, 0xFB	; 251
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 4d 00 	call	0x9a	; 0x9a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(0x0004 , Copy_u8Data ,4  ) ;
 574:	44 e0       	ldi	r20, 0x04	; 4
 576:	be 01       	movw	r22, r28
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 4d 00 	call	0x9a	; 0x9a <EEPROM_voidWritePage>
	
		
	EEPROM_voidReadPage	(0x0000 , Copy_u8Rx	,4  ) ;
 584:	44 e0       	ldi	r20, 0x04	; 4
 586:	be 01       	movw	r22, r28
 588:	67 5f       	subi	r22, 0xF7	; 247
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 78 00 	call	0xf0	; 0xf0 <EEPROM_voidReadPage>
	LCD_voidWriteSting( Copy_u8Rx , LINE1);
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	ce 01       	movw	r24, r28
 598:	09 96       	adiw	r24, 0x09	; 9
 59a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteSting>
 59e:	2f ef       	ldi	r18, 0xFF	; 255
 5a0:	83 ed       	ldi	r24, 0xD3	; 211
 5a2:	90 e3       	ldi	r25, 0x30	; 48
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x96>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0xa0>
 5ae:	00 00       	nop
	_delay_ms(1000);
	LCD_voidClear() ;
 5b0:	0e 94 80 02 	call	0x500	; 0x500 <LCD_voidClear>
	
	EEPROM_voidReadPage	(0x0004 , Copy_u8Rx, 4  ) ;
 5b4:	44 e0       	ldi	r20, 0x04	; 4
 5b6:	be 01       	movw	r22, r28
 5b8:	67 5f       	subi	r22, 0xF7	; 247
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	84 e0       	ldi	r24, 0x04	; 4
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 78 00 	call	0xf0	; 0xf0 <EEPROM_voidReadPage>
	LCD_voidWriteSting( Copy_u8Rx , LINE1);
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	ce 01       	movw	r24, r28
 5c8:	09 96       	adiw	r24, 0x09	; 9
 5ca:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_voidWriteSting>
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	83 ed       	ldi	r24, 0xD3	; 211
 5d2:	90 e3       	ldi	r25, 0x30	; 48
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <main+0xc6>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <main+0xd0>
 5de:	00 00       	nop
	_delay_ms(1000);
	LCD_voidClear() ;
 5e0:	0e 94 80 02 	call	0x500	; 0x500 <LCD_voidClear>
		
	Return_Value = EEPROM_u8Search (Rx , 2)  ;
 5e4:	62 e0       	ldi	r22, 0x02	; 2
 5e6:	ce 01       	movw	r24, r28
 5e8:	0d 96       	adiw	r24, 0x0d	; 13
 5ea:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_u8Search>
	
	LCD_voidDisplayNumber(Return_Value) ;
 5ee:	68 2f       	mov	r22, r24
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_voidDisplayNumber>
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	83 ed       	ldi	r24, 0xD3	; 211
 5fe:	90 e3       	ldi	r25, 0x30	; 48
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <main+0xf2>
 608:	00 c0       	rjmp	.+0      	; 0x60a <main+0xfc>
 60a:	00 00       	nop
	_delay_ms(1000);
	LCD_voidClear() ;
 60c:	0e 94 80 02 	call	0x500	; 0x500 <LCD_voidClear>
 610:	ff cf       	rjmp	.-2      	; 0x610 <main+0x102>

00000612 <__vector_16>:



void __vector_16()__attribute__((signal));
void __vector_16()
{
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
	
	if (GPTF_ADC!='\0')
 634:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GPTF_ADC>
 638:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GPTF_ADC+0x1>
 63c:	30 97       	sbiw	r30, 0x00	; 0
 63e:	09 f0       	breq	.+2      	; 0x642 <__vector_16+0x30>
	{
		GPTF_ADC();
 640:	09 95       	icall
	}
	
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <DIO_voidSetPinDirection>:
		}*/
}

void DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
	if (Copy_u8PinDir==PIN_OUTPUT_ID)
 664:	41 30       	cpi	r20, 0x01	; 1
 666:	a1 f5       	brne	.+104    	; 0x6d0 <DIO_voidSetPinDirection+0x6c>
	{
		switch (Copy_u8PortID)
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	89 f0       	breq	.+34     	; 0x68e <DIO_voidSetPinDirection+0x2a>
 66c:	28 f0       	brcs	.+10     	; 0x678 <DIO_voidSetPinDirection+0x14>
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	c9 f0       	breq	.+50     	; 0x6a4 <DIO_voidSetPinDirection+0x40>
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	11 f1       	breq	.+68     	; 0x6ba <DIO_voidSetPinDirection+0x56>
 676:	08 95       	ret
		{
			
			case (PORTA_ID):        Set_bit(DDRA_REG,Copy_u8PinID);        
 678:	2a b3       	in	r18, 0x1a	; 26
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_voidSetPinDirection+0x20>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	6a 95       	dec	r22
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_voidSetPinDirection+0x1c>
 688:	82 2b       	or	r24, r18
 68a:	8a bb       	out	0x1a, r24	; 26
			break ;
 68c:	08 95       	ret
			case (PORTB_ID):        Set_bit(DDRB_REG,Copy_u8PinID);        
 68e:	27 b3       	in	r18, 0x17	; 23
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_voidSetPinDirection+0x36>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_voidSetPinDirection+0x32>
 69e:	82 2b       	or	r24, r18
 6a0:	87 bb       	out	0x17, r24	; 23
			break ;
 6a2:	08 95       	ret
			case (PORTC_ID):        Set_bit(DDRC_REG,Copy_u8PinID);        
 6a4:	24 b3       	in	r18, 0x14	; 20
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_voidSetPinDirection+0x4c>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_voidSetPinDirection+0x48>
 6b4:	82 2b       	or	r24, r18
 6b6:	84 bb       	out	0x14, r24	; 20
			break ;
 6b8:	08 95       	ret
			case (PORTD_ID):        Set_bit(DDRD_REG,Copy_u8PinID);        
 6ba:	21 b3       	in	r18, 0x11	; 17
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_voidSetPinDirection+0x62>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_voidSetPinDirection+0x5e>
 6ca:	82 2b       	or	r24, r18
 6cc:	81 bb       	out	0x11, r24	; 17
			break ;
 6ce:	08 95       	ret
			
			
		}
		
	}
	else if (Copy_u8PinDir==PIN_INPUT_ID)
 6d0:	41 11       	cpse	r20, r1
 6d2:	37 c0       	rjmp	.+110    	; 0x742 <DIO_voidSetPinDirection+0xde>
	{
		switch (Copy_u8PortID)
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	91 f0       	breq	.+36     	; 0x6fc <DIO_voidSetPinDirection+0x98>
 6d8:	28 f0       	brcs	.+10     	; 0x6e4 <DIO_voidSetPinDirection+0x80>
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	d9 f0       	breq	.+54     	; 0x714 <DIO_voidSetPinDirection+0xb0>
 6de:	83 30       	cpi	r24, 0x03	; 3
 6e0:	29 f1       	breq	.+74     	; 0x72c <DIO_voidSetPinDirection+0xc8>
 6e2:	08 95       	ret
		{
			
			case (PORTA_ID):        Clear_bit(DDRA_REG,Copy_u8PinID);        //Port A
 6e4:	2a b3       	in	r18, 0x1a	; 26
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_voidSetPinDirection+0x8c>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_voidSetPinDirection+0x88>
 6f4:	80 95       	com	r24
 6f6:	82 23       	and	r24, r18
 6f8:	8a bb       	out	0x1a, r24	; 26
			break ;
 6fa:	08 95       	ret
			case (PORTB_ID):        Clear_bit(DDRB_REG,Copy_u8PinID);        //Port B
 6fc:	27 b3       	in	r18, 0x17	; 23
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_voidSetPinDirection+0xa4>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_voidSetPinDirection+0xa0>
 70c:	80 95       	com	r24
 70e:	82 23       	and	r24, r18
 710:	87 bb       	out	0x17, r24	; 23
			break ;
 712:	08 95       	ret
			case (PORTC_ID):        Clear_bit(DDRC_REG,Copy_u8PinID);       //Port C
 714:	24 b3       	in	r18, 0x14	; 20
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_voidSetPinDirection+0xbc>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_voidSetPinDirection+0xb8>
 724:	80 95       	com	r24
 726:	82 23       	and	r24, r18
 728:	84 bb       	out	0x14, r24	; 20
			break ;
 72a:	08 95       	ret
			case (PORTD_ID):        Clear_bit(DDRD_REG,Copy_u8PinID);       //Port D
 72c:	21 b3       	in	r18, 0x11	; 17
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_voidSetPinDirection+0xd4>
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	6a 95       	dec	r22
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_voidSetPinDirection+0xd0>
 73c:	80 95       	com	r24
 73e:	82 23       	and	r24, r18
 740:	81 bb       	out	0x11, r24	; 17
 742:	08 95       	ret

00000744 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
	
	if (Copy_u8PinValue==PIN_HIGH)
 744:	41 30       	cpi	r20, 0x01	; 1
 746:	a1 f5       	brne	.+104    	; 0x7b0 <DIO_voidSetPinValue+0x6c>
	{
		switch (Copy_u8PortID)
 748:	81 30       	cpi	r24, 0x01	; 1
 74a:	89 f0       	breq	.+34     	; 0x76e <DIO_voidSetPinValue+0x2a>
 74c:	28 f0       	brcs	.+10     	; 0x758 <DIO_voidSetPinValue+0x14>
 74e:	82 30       	cpi	r24, 0x02	; 2
 750:	c9 f0       	breq	.+50     	; 0x784 <DIO_voidSetPinValue+0x40>
 752:	83 30       	cpi	r24, 0x03	; 3
 754:	11 f1       	breq	.+68     	; 0x79a <DIO_voidSetPinValue+0x56>
 756:	08 95       	ret
		{
			
			case (PORTA_ID):        Set_bit(PORTA_REG,Copy_u8PinID);        // Port A
 758:	2b b3       	in	r18, 0x1b	; 27
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_voidSetPinValue+0x20>
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	6a 95       	dec	r22
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_voidSetPinValue+0x1c>
 768:	82 2b       	or	r24, r18
 76a:	8b bb       	out	0x1b, r24	; 27
			break ;
 76c:	08 95       	ret
			case (PORTB_ID):        Set_bit(PORTB_REG,Copy_u8PinID);        //Port B
 76e:	28 b3       	in	r18, 0x18	; 24
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_voidSetPinValue+0x36>
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	6a 95       	dec	r22
 77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_voidSetPinValue+0x32>
 77e:	82 2b       	or	r24, r18
 780:	88 bb       	out	0x18, r24	; 24
			break ;
 782:	08 95       	ret
			case (PORTC_ID):        Set_bit(PORTC_REG,Copy_u8PinID);        //Port C
 784:	25 b3       	in	r18, 0x15	; 21
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_voidSetPinValue+0x4c>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	6a 95       	dec	r22
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_voidSetPinValue+0x48>
 794:	82 2b       	or	r24, r18
 796:	85 bb       	out	0x15, r24	; 21
			break ;
 798:	08 95       	ret
			case (PORTD_ID):        Set_bit(PORTD_REG,Copy_u8PinID);        //Port D
 79a:	22 b3       	in	r18, 0x12	; 18
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_voidSetPinValue+0x62>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	6a 95       	dec	r22
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_voidSetPinValue+0x5e>
 7aa:	82 2b       	or	r24, r18
 7ac:	82 bb       	out	0x12, r24	; 18
			break ;
 7ae:	08 95       	ret
			
		}
		
	}
	
	else if (Copy_u8PinValue==PIN_LOW)
 7b0:	41 11       	cpse	r20, r1
 7b2:	37 c0       	rjmp	.+110    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		switch (Copy_u8PortID)
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	91 f0       	breq	.+36     	; 0x7dc <DIO_voidSetPinValue+0x98>
 7b8:	28 f0       	brcs	.+10     	; 0x7c4 <DIO_voidSetPinValue+0x80>
 7ba:	82 30       	cpi	r24, 0x02	; 2
 7bc:	d9 f0       	breq	.+54     	; 0x7f4 <DIO_voidSetPinValue+0xb0>
 7be:	83 30       	cpi	r24, 0x03	; 3
 7c0:	29 f1       	breq	.+74     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7c2:	08 95       	ret
		{
			
			case (PORTA_ID):        Clear_bit(PORTA_REG,Copy_u8PinID);
 7c4:	2b b3       	in	r18, 0x1b	; 27
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_voidSetPinValue+0x8c>
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	6a 95       	dec	r22
 7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_voidSetPinValue+0x88>
 7d4:	80 95       	com	r24
 7d6:	82 23       	and	r24, r18
 7d8:	8b bb       	out	0x1b, r24	; 27
			break ;
 7da:	08 95       	ret
			case (PORTB_ID):        Clear_bit(PORTB_REG,Copy_u8PinID);
 7dc:	28 b3       	in	r18, 0x18	; 24
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_voidSetPinValue+0xa4>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_voidSetPinValue+0xa0>
 7ec:	80 95       	com	r24
 7ee:	82 23       	and	r24, r18
 7f0:	88 bb       	out	0x18, r24	; 24
			break ;
 7f2:	08 95       	ret
			case (PORTC_ID):        Clear_bit(PORTC_REG,Copy_u8PinID);
 7f4:	25 b3       	in	r18, 0x15	; 21
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	6a 95       	dec	r22
 802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_voidSetPinValue+0xb8>
 804:	80 95       	com	r24
 806:	82 23       	and	r24, r18
 808:	85 bb       	out	0x15, r24	; 21
			break ;
 80a:	08 95       	ret
			case (PORTD_ID):        Clear_bit(PORTD_REG,Copy_u8PinID);
 80c:	22 b3       	in	r18, 0x12	; 18
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	6a 95       	dec	r22
 81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 81c:	80 95       	com	r24
 81e:	82 23       	and	r24, r18
 820:	82 bb       	out	0x12, r24	; 18
 822:	08 95       	ret

00000824 <__vector_1>:



void __vector_1()__attribute__((signal));
void __vector_1()
{
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	2f 93       	push	r18
 830:	3f 93       	push	r19
 832:	4f 93       	push	r20
 834:	5f 93       	push	r21
 836:	6f 93       	push	r22
 838:	7f 93       	push	r23
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	af 93       	push	r26
 840:	bf 93       	push	r27
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
	
	if (GPTF_EXT0!='\0')
 846:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GPTF_EXT0>
 84a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GPTF_EXT0+0x1>
 84e:	30 97       	sbiw	r30, 0x00	; 0
 850:	09 f0       	breq	.+2      	; 0x854 <__vector_1+0x30>
	{
		GPTF_EXT0();
 852:	09 95       	icall
	}

}
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_2>:



void __vector_2()__attribute__((signal));
void __vector_2()
{
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	2f 93       	push	r18
 882:	3f 93       	push	r19
 884:	4f 93       	push	r20
 886:	5f 93       	push	r21
 888:	6f 93       	push	r22
 88a:	7f 93       	push	r23
 88c:	8f 93       	push	r24
 88e:	9f 93       	push	r25
 890:	af 93       	push	r26
 892:	bf 93       	push	r27
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
	if (GPTF_EXT1!='\0')
 898:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <GPTF_EXT1>
 89c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <GPTF_EXT1+0x1>
 8a0:	30 97       	sbiw	r30, 0x00	; 0
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__vector_2+0x30>
	{
	GPTF_EXT1(); 
 8a4:	09 95       	icall
	}
}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	0f 90       	pop	r0
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	0f 90       	pop	r0
 8c4:	1f 90       	pop	r1
 8c6:	18 95       	reti

000008c8 <__vector_3>:



void __vector_3()__attribute__((signal));
void __vector_3()
{
 8c8:	1f 92       	push	r1
 8ca:	0f 92       	push	r0
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	0f 92       	push	r0
 8d0:	11 24       	eor	r1, r1
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
 8e6:	ef 93       	push	r30
 8e8:	ff 93       	push	r31
	if (GPTF_EXT2!='\0')
 8ea:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GPTF_EXT2>
 8ee:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GPTF_EXT2+0x1>
 8f2:	30 97       	sbiw	r30, 0x00	; 0
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__vector_3+0x30>
	{
	GPTF_EXT2();
 8f6:	09 95       	icall
	}
}
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <__vector_12>:

///////////////////////////////////////////////////////////////

void __vector_12()__attribute__((signal));
void __vector_12()
{
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
	SPI_GPTR();
 93c:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <SPI_GPTR>
 940:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <SPI_GPTR+0x1>
 944:	09 95       	icall

}
 946:	ff 91       	pop	r31
 948:	ef 91       	pop	r30
 94a:	bf 91       	pop	r27
 94c:	af 91       	pop	r26
 94e:	9f 91       	pop	r25
 950:	8f 91       	pop	r24
 952:	7f 91       	pop	r23
 954:	6f 91       	pop	r22
 956:	5f 91       	pop	r21
 958:	4f 91       	pop	r20
 95a:	3f 91       	pop	r19
 95c:	2f 91       	pop	r18
 95e:	0f 90       	pop	r0
 960:	0f be       	out	0x3f, r0	; 63
 962:	0f 90       	pop	r0
 964:	1f 90       	pop	r1
 966:	18 95       	reti

00000968 <__vector_11>:
////////////////////////////////////////////////////////////////////////////

/* Timer 0 OverFlow */ 
void __vector_11()__attribute__((signal));
void __vector_11()
{
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	11 24       	eor	r1, r1
 972:	2f 93       	push	r18
 974:	3f 93       	push	r19
 976:	4f 93       	push	r20
 978:	5f 93       	push	r21
 97a:	6f 93       	push	r22
 97c:	7f 93       	push	r23
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	af 93       	push	r26
 984:	bf 93       	push	r27
 986:	ef 93       	push	r30
 988:	ff 93       	push	r31
	TMR0OF_GPTR() ;	
 98a:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <TMR0OF_GPTR>
 98e:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <TMR0OF_GPTR+0x1>
 992:	09 95       	icall
}
 994:	ff 91       	pop	r31
 996:	ef 91       	pop	r30
 998:	bf 91       	pop	r27
 99a:	af 91       	pop	r26
 99c:	9f 91       	pop	r25
 99e:	8f 91       	pop	r24
 9a0:	7f 91       	pop	r23
 9a2:	6f 91       	pop	r22
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <__vector_10>:

/* Timer 0 Compare Match */
void __vector_10()__attribute__((signal));
void __vector_10()
{
 9b6:	1f 92       	push	r1
 9b8:	0f 92       	push	r0
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	0f 92       	push	r0
 9be:	11 24       	eor	r1, r1
 9c0:	2f 93       	push	r18
 9c2:	3f 93       	push	r19
 9c4:	4f 93       	push	r20
 9c6:	5f 93       	push	r21
 9c8:	6f 93       	push	r22
 9ca:	7f 93       	push	r23
 9cc:	8f 93       	push	r24
 9ce:	9f 93       	push	r25
 9d0:	af 93       	push	r26
 9d2:	bf 93       	push	r27
 9d4:	ef 93       	push	r30
 9d6:	ff 93       	push	r31

	static u16 Counter = 0 ;
	Counter ++ ;
 9d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 9dc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9e0:	01 96       	adiw	r24, 0x01	; 1
 9e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (Counter == CTC_Counter )
 9ea:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <CTC_Counter>
 9ee:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <CTC_Counter+0x1>
 9f2:	82 17       	cp	r24, r18
 9f4:	93 07       	cpc	r25, r19
 9f6:	49 f4       	brne	.+18     	; 0xa0a <__vector_10+0x54>
	{
		Counter = 0 ;
 9f8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		TMR0CTC_GPTR();
 a00:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TMR0CTC_GPTR>
 a04:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TMR0CTC_GPTR+0x1>
 a08:	09 95       	icall
	}
}
 a0a:	ff 91       	pop	r31
 a0c:	ef 91       	pop	r30
 a0e:	bf 91       	pop	r27
 a10:	af 91       	pop	r26
 a12:	9f 91       	pop	r25
 a14:	8f 91       	pop	r24
 a16:	7f 91       	pop	r23
 a18:	6f 91       	pop	r22
 a1a:	5f 91       	pop	r21
 a1c:	4f 91       	pop	r20
 a1e:	3f 91       	pop	r19
 a20:	2f 91       	pop	r18
 a22:	0f 90       	pop	r0
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	0f 90       	pop	r0
 a28:	1f 90       	pop	r1
 a2a:	18 95       	reti

00000a2c <__vector_9>:


/* Timer 1 OverFlow */
void __vector_9()__attribute__((signal));
void __vector_9()
{
 a2c:	1f 92       	push	r1
 a2e:	0f 92       	push	r0
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	0f 92       	push	r0
 a34:	11 24       	eor	r1, r1
 a36:	2f 93       	push	r18
 a38:	3f 93       	push	r19
 a3a:	4f 93       	push	r20
 a3c:	5f 93       	push	r21
 a3e:	6f 93       	push	r22
 a40:	7f 93       	push	r23
 a42:	8f 93       	push	r24
 a44:	9f 93       	push	r25
 a46:	af 93       	push	r26
 a48:	bf 93       	push	r27
 a4a:	ef 93       	push	r30
 a4c:	ff 93       	push	r31

		TMR1OF_GPTR();
 a4e:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <TMR1OF_GPTR>
 a52:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <TMR1OF_GPTR+0x1>
 a56:	09 95       	icall
}
 a58:	ff 91       	pop	r31
 a5a:	ef 91       	pop	r30
 a5c:	bf 91       	pop	r27
 a5e:	af 91       	pop	r26
 a60:	9f 91       	pop	r25
 a62:	8f 91       	pop	r24
 a64:	7f 91       	pop	r23
 a66:	6f 91       	pop	r22
 a68:	5f 91       	pop	r21
 a6a:	4f 91       	pop	r20
 a6c:	3f 91       	pop	r19
 a6e:	2f 91       	pop	r18
 a70:	0f 90       	pop	r0
 a72:	0f be       	out	0x3f, r0	; 63
 a74:	0f 90       	pop	r0
 a76:	1f 90       	pop	r1
 a78:	18 95       	reti

00000a7a <__vector_8>:

/* Timer 1 CompareB */
void __vector_8()__attribute__((signal));
void __vector_8()
{
 a7a:	1f 92       	push	r1
 a7c:	0f 92       	push	r0
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	0f 92       	push	r0
 a82:	11 24       	eor	r1, r1
 a84:	2f 93       	push	r18
 a86:	3f 93       	push	r19
 a88:	4f 93       	push	r20
 a8a:	5f 93       	push	r21
 a8c:	6f 93       	push	r22
 a8e:	7f 93       	push	r23
 a90:	8f 93       	push	r24
 a92:	9f 93       	push	r25
 a94:	af 93       	push	r26
 a96:	bf 93       	push	r27
 a98:	ef 93       	push	r30
 a9a:	ff 93       	push	r31

	TMR1COMPB_GPTR();
 a9c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TMR1COMPB_GPTR>
 aa0:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TMR1COMPB_GPTR+0x1>
 aa4:	09 95       	icall
}
 aa6:	ff 91       	pop	r31
 aa8:	ef 91       	pop	r30
 aaa:	bf 91       	pop	r27
 aac:	af 91       	pop	r26
 aae:	9f 91       	pop	r25
 ab0:	8f 91       	pop	r24
 ab2:	7f 91       	pop	r23
 ab4:	6f 91       	pop	r22
 ab6:	5f 91       	pop	r21
 ab8:	4f 91       	pop	r20
 aba:	3f 91       	pop	r19
 abc:	2f 91       	pop	r18
 abe:	0f 90       	pop	r0
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	0f 90       	pop	r0
 ac4:	1f 90       	pop	r1
 ac6:	18 95       	reti

00000ac8 <__vector_7>:

/* Timer 1 CompareA */
void __vector_7()__attribute__((signal));
void __vector_7()
{
 ac8:	1f 92       	push	r1
 aca:	0f 92       	push	r0
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	0f 92       	push	r0
 ad0:	11 24       	eor	r1, r1
 ad2:	2f 93       	push	r18
 ad4:	3f 93       	push	r19
 ad6:	4f 93       	push	r20
 ad8:	5f 93       	push	r21
 ada:	6f 93       	push	r22
 adc:	7f 93       	push	r23
 ade:	8f 93       	push	r24
 ae0:	9f 93       	push	r25
 ae2:	af 93       	push	r26
 ae4:	bf 93       	push	r27
 ae6:	ef 93       	push	r30
 ae8:	ff 93       	push	r31

	TMR1COMPA_GPTR();
 aea:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TMR1COMPA_GPTR>
 aee:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TMR1COMPA_GPTR+0x1>
 af2:	09 95       	icall
}
 af4:	ff 91       	pop	r31
 af6:	ef 91       	pop	r30
 af8:	bf 91       	pop	r27
 afa:	af 91       	pop	r26
 afc:	9f 91       	pop	r25
 afe:	8f 91       	pop	r24
 b00:	7f 91       	pop	r23
 b02:	6f 91       	pop	r22
 b04:	5f 91       	pop	r21
 b06:	4f 91       	pop	r20
 b08:	3f 91       	pop	r19
 b0a:	2f 91       	pop	r18
 b0c:	0f 90       	pop	r0
 b0e:	0f be       	out	0x3f, r0	; 63
 b10:	0f 90       	pop	r0
 b12:	1f 90       	pop	r1
 b14:	18 95       	reti

00000b16 <__vector_6>:

/* Timer 1 Capture */
void __vector_6()__attribute__((signal));
void __vector_6()
{
 b16:	1f 92       	push	r1
 b18:	0f 92       	push	r0
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	0f 92       	push	r0
 b1e:	11 24       	eor	r1, r1
 b20:	2f 93       	push	r18
 b22:	3f 93       	push	r19
 b24:	4f 93       	push	r20
 b26:	5f 93       	push	r21
 b28:	6f 93       	push	r22
 b2a:	7f 93       	push	r23
 b2c:	8f 93       	push	r24
 b2e:	9f 93       	push	r25
 b30:	af 93       	push	r26
 b32:	bf 93       	push	r27
 b34:	ef 93       	push	r30
 b36:	ff 93       	push	r31

	TMR1CAP_GPTR(ICR1);
 b38:	86 b5       	in	r24, 0x26	; 38
 b3a:	97 b5       	in	r25, 0x27	; 39
 b3c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <TMR1CAP_GPTR>
 b40:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <TMR1CAP_GPTR+0x1>
 b44:	09 95       	icall
}
 b46:	ff 91       	pop	r31
 b48:	ef 91       	pop	r30
 b4a:	bf 91       	pop	r27
 b4c:	af 91       	pop	r26
 b4e:	9f 91       	pop	r25
 b50:	8f 91       	pop	r24
 b52:	7f 91       	pop	r23
 b54:	6f 91       	pop	r22
 b56:	5f 91       	pop	r21
 b58:	4f 91       	pop	r20
 b5a:	3f 91       	pop	r19
 b5c:	2f 91       	pop	r18
 b5e:	0f 90       	pop	r0
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	0f 90       	pop	r0
 b64:	1f 90       	pop	r1
 b66:	18 95       	reti

00000b68 <__vector_5>:


/* Timer 2 OF */
void __vector_5()__attribute__((signal));
void __vector_5()
{
 b68:	1f 92       	push	r1
 b6a:	0f 92       	push	r0
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	0f 92       	push	r0
 b70:	11 24       	eor	r1, r1
 b72:	2f 93       	push	r18
 b74:	3f 93       	push	r19
 b76:	4f 93       	push	r20
 b78:	5f 93       	push	r21
 b7a:	6f 93       	push	r22
 b7c:	7f 93       	push	r23
 b7e:	8f 93       	push	r24
 b80:	9f 93       	push	r25
 b82:	af 93       	push	r26
 b84:	bf 93       	push	r27
 b86:	ef 93       	push	r30
 b88:	ff 93       	push	r31
	TMR2OF_GPTR();
 b8a:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <TMR2OF_GPTR>
 b8e:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <TMR2OF_GPTR+0x1>
 b92:	09 95       	icall

}
 b94:	ff 91       	pop	r31
 b96:	ef 91       	pop	r30
 b98:	bf 91       	pop	r27
 b9a:	af 91       	pop	r26
 b9c:	9f 91       	pop	r25
 b9e:	8f 91       	pop	r24
 ba0:	7f 91       	pop	r23
 ba2:	6f 91       	pop	r22
 ba4:	5f 91       	pop	r21
 ba6:	4f 91       	pop	r20
 ba8:	3f 91       	pop	r19
 baa:	2f 91       	pop	r18
 bac:	0f 90       	pop	r0
 bae:	0f be       	out	0x3f, r0	; 63
 bb0:	0f 90       	pop	r0
 bb2:	1f 90       	pop	r1
 bb4:	18 95       	reti

00000bb6 <__vector_4>:

/* Timer 2 Compare */
void __vector_4()__attribute__((signal));
void __vector_4()
{
 bb6:	1f 92       	push	r1
 bb8:	0f 92       	push	r0
 bba:	0f b6       	in	r0, 0x3f	; 63
 bbc:	0f 92       	push	r0
 bbe:	11 24       	eor	r1, r1
 bc0:	2f 93       	push	r18
 bc2:	3f 93       	push	r19
 bc4:	4f 93       	push	r20
 bc6:	5f 93       	push	r21
 bc8:	6f 93       	push	r22
 bca:	7f 93       	push	r23
 bcc:	8f 93       	push	r24
 bce:	9f 93       	push	r25
 bd0:	af 93       	push	r26
 bd2:	bf 93       	push	r27
 bd4:	ef 93       	push	r30
 bd6:	ff 93       	push	r31
	TMR2CTC_GPTR();
 bd8:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TMR2CTC_GPTR>
 bdc:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TMR2CTC_GPTR+0x1>
 be0:	09 95       	icall

}
 be2:	ff 91       	pop	r31
 be4:	ef 91       	pop	r30
 be6:	bf 91       	pop	r27
 be8:	af 91       	pop	r26
 bea:	9f 91       	pop	r25
 bec:	8f 91       	pop	r24
 bee:	7f 91       	pop	r23
 bf0:	6f 91       	pop	r22
 bf2:	5f 91       	pop	r21
 bf4:	4f 91       	pop	r20
 bf6:	3f 91       	pop	r19
 bf8:	2f 91       	pop	r18
 bfa:	0f 90       	pop	r0
 bfc:	0f be       	out	0x3f, r0	; 63
 bfe:	0f 90       	pop	r0
 c00:	1f 90       	pop	r1
 c02:	18 95       	reti

00000c04 <TWI_voidInitMaster>:
void TWI_voidInitMaster (u8 Copy_u8Adress) 

{
	/* In Case you don't want to write Address to 
	the slave write any Number to Break If Condition */ 
	if (Copy_u8Adress < 128)
 c04:	88 23       	and	r24, r24
 c06:	14 f0       	brlt	.+4      	; 0xc0c <TWI_voidInitMaster+0x8>
	{
		TWAR = Copy_u8Adress<<1 ;
 c08:	88 0f       	add	r24, r24
 c0a:	82 b9       	out	0x02, r24	; 2
	}
	
	/* CLK = 400KHZ "Max Clock In AVR " */ 
	/* Pre_Scaler Bits "00" */
	Clear_bit(TWSR,TWPS0);
 c0c:	81 b1       	in	r24, 0x01	; 1
 c0e:	8e 7f       	andi	r24, 0xFE	; 254
 c10:	81 b9       	out	0x01, r24	; 1
	Clear_bit(TWSR,TWPS1);
 c12:	81 b1       	in	r24, 0x01	; 1
 c14:	8d 7f       	andi	r24, 0xFD	; 253
 c16:	81 b9       	out	0x01, r24	; 1
	TWBR = TWBR_VALUE ;
 c18:	8c e0       	ldi	r24, 0x0C	; 12
 c1a:	80 b9       	out	0x00, r24	; 0
	
	//Enable ACK 
	Set_bit(TWCR,TWEA) ;
 c1c:	86 b7       	in	r24, 0x36	; 54
 c1e:	80 64       	ori	r24, 0x40	; 64
 c20:	86 bf       	out	0x36, r24	; 54
	
	//Enable TWI 
	Set_bit(TWCR,TWEN);	
 c22:	86 b7       	in	r24, 0x36	; 54
 c24:	84 60       	ori	r24, 0x04	; 4
 c26:	86 bf       	out	0x36, r24	; 54
 c28:	08 95       	ret

00000c2a <TWI_voidStartCondition>:

/* If You Called this Function then this Node is Master */ 
void TWI_voidStartCondition (void) 
{
	//Request Start Condition 
	Set_bit(TWCR,TWSTA);
 c2a:	86 b7       	in	r24, 0x36	; 54
 c2c:	80 62       	ori	r24, 0x20	; 32
 c2e:	86 bf       	out	0x36, r24	; 54
	//Clear Flag "If not the Clock will be Zero " "Write 1 To Clear "
	Set_bit(TWCR,TWINT);
 c30:	86 b7       	in	r24, 0x36	; 54
 c32:	80 68       	ori	r24, 0x80	; 128
 c34:	86 bf       	out	0x36, r24	; 54
	//Polling on the flag to make sure the Start Condition is Sent 
	while (Get_bit(TWCR,TWINT) == 0) ;
 c36:	06 b6       	in	r0, 0x36	; 54
 c38:	07 fe       	sbrs	r0, 7
 c3a:	fd cf       	rjmp	.-6      	; 0xc36 <TWI_voidStartCondition+0xc>
	//To Make Sure That Start Condition Is Sent Correctly 
	while ( (TWI_STATUS_VALUE) != (TWI_START_CONDTION_ACK)) ;
 c3c:	81 b1       	in	r24, 0x01	; 1
 c3e:	88 7f       	andi	r24, 0xF8	; 248
 c40:	88 30       	cpi	r24, 0x08	; 8
 c42:	e1 f7       	brne	.-8      	; 0xc3c <TWI_voidStartCondition+0x12>
}
 c44:	08 95       	ret

00000c46 <TWI_voidRepeatedStartCondition>:


void TWI_voidRepeatedStartCondition (void) 
{
	//Request Start Condition
	Set_bit(TWCR,TWSTA);
 c46:	86 b7       	in	r24, 0x36	; 54
 c48:	80 62       	ori	r24, 0x20	; 32
 c4a:	86 bf       	out	0x36, r24	; 54
	//Clear Flag "If not the Clock will be Zero " "Write 1 To Clear "
	Set_bit(TWCR,TWINT);
 c4c:	86 b7       	in	r24, 0x36	; 54
 c4e:	80 68       	ori	r24, 0x80	; 128
 c50:	86 bf       	out	0x36, r24	; 54
	//Polling on the flag to make sure the Start Condition is Sent
	while (Get_bit(TWCR,TWINT) == 0) ;
 c52:	06 b6       	in	r0, 0x36	; 54
 c54:	07 fe       	sbrs	r0, 7
 c56:	fd cf       	rjmp	.-6      	; 0xc52 <TWI_voidRepeatedStartCondition+0xc>
	//To Make Sure That Start Condition Is Sent Correctly
	while ( (TWI_STATUS_VALUE) != (TWI_REP_START_CONDTION_ACK)) ;
 c58:	81 b1       	in	r24, 0x01	; 1
 c5a:	88 7f       	andi	r24, 0xF8	; 248
 c5c:	80 31       	cpi	r24, 0x10	; 16
 c5e:	e1 f7       	brne	.-8      	; 0xc58 <TWI_voidRepeatedStartCondition+0x12>
	
}
 c60:	08 95       	ret

00000c62 <TWI_voidStopCondition>:


void TWI_voidStopCondition (void) 
{
	//Request Stop Condition
	Set_bit(TWCR,TWSTO);
 c62:	86 b7       	in	r24, 0x36	; 54
 c64:	80 61       	ori	r24, 0x10	; 16
 c66:	86 bf       	out	0x36, r24	; 54
	//Clear Flag "If not the Clock will be Zero " "Write 1 To Clear "
	Set_bit(TWCR,TWINT);
 c68:	86 b7       	in	r24, 0x36	; 54
 c6a:	80 68       	ori	r24, 0x80	; 128
 c6c:	86 bf       	out	0x36, r24	; 54
 c6e:	08 95       	ret

00000c70 <TWI_voidSendSlaveAdressWithWrite>:


void TWI_voidSendSlaveAdressWithWrite (u8 Copy_u8SlaveAdress) 
{
	
	if (Copy_u8SlaveAdress < 128)
 c70:	88 23       	and	r24, r24
 c72:	94 f0       	brlt	.+36     	; 0xc98 <TWI_voidSendSlaveAdressWithWrite+0x28>
	{
		// Slave I want to Contact With 
		TWDR = Copy_u8SlaveAdress << 1 ;
 c74:	88 0f       	add	r24, r24
 c76:	83 b9       	out	0x03, r24	; 3
		// Select Write Operation  
		Clear_bit(TWDR,0) ;
 c78:	83 b1       	in	r24, 0x03	; 3
 c7a:	8e 7f       	andi	r24, 0xFE	; 254
 c7c:	83 b9       	out	0x03, r24	; 3
		//Clear Start Condition
		Clear_bit(TWCR,TWSTA) ;
 c7e:	86 b7       	in	r24, 0x36	; 54
 c80:	8f 7d       	andi	r24, 0xDF	; 223
 c82:	86 bf       	out	0x36, r24	; 54
		//Clear Flag "If not the Clock will be Zero " "Write 1 To Clear "
		Set_bit(TWCR,TWINT);
 c84:	86 b7       	in	r24, 0x36	; 54
 c86:	80 68       	ori	r24, 0x80	; 128
 c88:	86 bf       	out	0x36, r24	; 54
		//Polling on the flag to make sure Slave Address is Sent
		while (Get_bit(TWCR,TWINT) == 0) ;
 c8a:	06 b6       	in	r0, 0x36	; 54
 c8c:	07 fe       	sbrs	r0, 7
 c8e:	fd cf       	rjmp	.-6      	; 0xc8a <TWI_voidSendSlaveAdressWithWrite+0x1a>
		//To Make Sure That Slave Address Is Sent Correctly
		while ( (TWI_STATUS_VALUE) != (TWI_SLAVE_ADRESS_WRITE_ACK) ) ;
 c90:	81 b1       	in	r24, 0x01	; 1
 c92:	88 7f       	andi	r24, 0xF8	; 248
 c94:	88 31       	cpi	r24, 0x18	; 24
 c96:	e1 f7       	brne	.-8      	; 0xc90 <TWI_voidSendSlaveAdressWithWrite+0x20>
 c98:	08 95       	ret

00000c9a <TWI_voidSendSlaveAdressWithRead>:

void TWI_voidSendSlaveAdressWithRead(u8 Copy_u8SlaveAdress) 
{
	
	
	if (Copy_u8SlaveAdress < 128)
 c9a:	88 23       	and	r24, r24
 c9c:	94 f0       	brlt	.+36     	; 0xcc2 <TWI_voidSendSlaveAdressWithRead+0x28>
	{
		// Slave I want to Contact With
		TWDR = Copy_u8SlaveAdress << 1 ;
 c9e:	88 0f       	add	r24, r24
 ca0:	83 b9       	out	0x03, r24	; 3
		// Select Read Operation
		Set_bit(TWDR,0) ;
 ca2:	83 b1       	in	r24, 0x03	; 3
 ca4:	81 60       	ori	r24, 0x01	; 1
 ca6:	83 b9       	out	0x03, r24	; 3
		//Clear Start Condition
		Clear_bit(TWCR,TWSTA) ;
 ca8:	86 b7       	in	r24, 0x36	; 54
 caa:	8f 7d       	andi	r24, 0xDF	; 223
 cac:	86 bf       	out	0x36, r24	; 54
		//Clear Flag "If not the Clock will be Zero " "Write 1 To Clear "
		Set_bit(TWCR,TWINT);
 cae:	86 b7       	in	r24, 0x36	; 54
 cb0:	80 68       	ori	r24, 0x80	; 128
 cb2:	86 bf       	out	0x36, r24	; 54
		//Polling on the flag to make sure the Slave Address is Sent
		while (Get_bit(TWCR,TWINT) == 0) ;
 cb4:	06 b6       	in	r0, 0x36	; 54
 cb6:	07 fe       	sbrs	r0, 7
 cb8:	fd cf       	rjmp	.-6      	; 0xcb4 <TWI_voidSendSlaveAdressWithRead+0x1a>
		//To Make Sure That Slave Address Is Sent Correctly
		while ( (TWI_STATUS_VALUE) != (TWI_SLAVE_ADRESS_READ_ACK) ) ;
 cba:	81 b1       	in	r24, 0x01	; 1
 cbc:	88 7f       	andi	r24, 0xF8	; 248
 cbe:	80 34       	cpi	r24, 0x40	; 64
 cc0:	e1 f7       	brne	.-8      	; 0xcba <TWI_voidSendSlaveAdressWithRead+0x20>
 cc2:	08 95       	ret

00000cc4 <TWI_voidSendMasterDataByte>:


void TWI_voidSendMasterDataByte (u8 Copy_u8TxData) 
{
	// Load Data on the Register 
	TWDR = 	Copy_u8TxData ;
 cc4:	83 b9       	out	0x03, r24	; 3
	//Clear Flag "If not the Clock will be Zero " "Write 1 To Clear "
	Set_bit(TWCR,TWINT);
 cc6:	86 b7       	in	r24, 0x36	; 54
 cc8:	80 68       	ori	r24, 0x80	; 128
 cca:	86 bf       	out	0x36, r24	; 54
	//Polling on the flag to make sure the Data Sent Completely 
	while (Get_bit(TWCR,TWINT) == 0) ;
 ccc:	06 b6       	in	r0, 0x36	; 54
 cce:	07 fe       	sbrs	r0, 7
 cd0:	fd cf       	rjmp	.-6      	; 0xccc <TWI_voidSendMasterDataByte+0x8>
	//To Make Sure That Master Send Data Correctly 
	while ( (TWI_STATUS_VALUE) != (TWI_MASTER_SEND_DATA_ACK) ) ;
 cd2:	81 b1       	in	r24, 0x01	; 1
 cd4:	88 7f       	andi	r24, 0xF8	; 248
 cd6:	88 32       	cpi	r24, 0x28	; 40
 cd8:	e1 f7       	brne	.-8      	; 0xcd2 <TWI_voidSendMasterDataByte+0xe>
	
}
 cda:	08 95       	ret

00000cdc <TWI_voidReceiveMasterDataByte>:


u8 TWI_voidReceiveMasterDataByte (void) 
{
	//Clear Flag "If not the Clock will be Zero " "Write 1 To Clear "
	Set_bit(TWCR,TWINT);
 cdc:	86 b7       	in	r24, 0x36	; 54
 cde:	80 68       	ori	r24, 0x80	; 128
 ce0:	86 bf       	out	0x36, r24	; 54
	//Polling on the flag to make sure the Data Rx Completely 
	while (Get_bit(TWCR,TWINT) == 0) ;
 ce2:	06 b6       	in	r0, 0x36	; 54
 ce4:	07 fe       	sbrs	r0, 7
 ce6:	fd cf       	rjmp	.-6      	; 0xce2 <TWI_voidReceiveMasterDataByte+0x6>
	//To Make Sure That Master Receive Data Correctly 
	//while ((TWI_STATUS_VALUE) != (TWI_MASTER_RX_DATA_ACK) ) ;
	
	//Return the Data 
	return TWDR ;
 ce8:	83 b1       	in	r24, 0x03	; 3
	
}
 cea:	08 95       	ret

00000cec <TWI_voidReadACK>:


void TWI_voidReadACK ()
{
	
	Set_bit(TWCR,TWEA);
 cec:	86 b7       	in	r24, 0x36	; 54
 cee:	80 64       	ori	r24, 0x40	; 64
 cf0:	86 bf       	out	0x36, r24	; 54
 cf2:	08 95       	ret

00000cf4 <TWI_voidReadNONACK>:
}

void TWI_voidReadNONACK ()
{
	
	Clear_bit(TWCR,TWEA);
 cf4:	86 b7       	in	r24, 0x36	; 54
 cf6:	8f 7b       	andi	r24, 0xBF	; 191
 cf8:	86 bf       	out	0x36, r24	; 54
 cfa:	08 95       	ret

00000cfc <__vector_13>:
/////////////////////////////////////////////////////////////////

// RX Complete 
void __vector_13()__attribute__((signal));
void __vector_13()
{
 cfc:	1f 92       	push	r1
 cfe:	0f 92       	push	r0
 d00:	0f b6       	in	r0, 0x3f	; 63
 d02:	0f 92       	push	r0
 d04:	11 24       	eor	r1, r1
 d06:	2f 93       	push	r18
 d08:	3f 93       	push	r19
 d0a:	4f 93       	push	r20
 d0c:	5f 93       	push	r21
 d0e:	6f 93       	push	r22
 d10:	7f 93       	push	r23
 d12:	8f 93       	push	r24
 d14:	9f 93       	push	r25
 d16:	af 93       	push	r26
 d18:	bf 93       	push	r27
 d1a:	ef 93       	push	r30
 d1c:	ff 93       	push	r31
	
	UARTRXC_GPTR (UDR) ;
 d1e:	8c b1       	in	r24, 0x0c	; 12
 d20:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <UARTRXC_GPTR>
 d24:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <UARTRXC_GPTR+0x1>
 d28:	09 95       	icall
}
 d2a:	ff 91       	pop	r31
 d2c:	ef 91       	pop	r30
 d2e:	bf 91       	pop	r27
 d30:	af 91       	pop	r26
 d32:	9f 91       	pop	r25
 d34:	8f 91       	pop	r24
 d36:	7f 91       	pop	r23
 d38:	6f 91       	pop	r22
 d3a:	5f 91       	pop	r21
 d3c:	4f 91       	pop	r20
 d3e:	3f 91       	pop	r19
 d40:	2f 91       	pop	r18
 d42:	0f 90       	pop	r0
 d44:	0f be       	out	0x3f, r0	; 63
 d46:	0f 90       	pop	r0
 d48:	1f 90       	pop	r1
 d4a:	18 95       	reti

00000d4c <__vector_14>:

// Data Register Empty 
void __vector_14()__attribute__((signal));
void __vector_14()
{
 d4c:	1f 92       	push	r1
 d4e:	0f 92       	push	r0
 d50:	0f b6       	in	r0, 0x3f	; 63
 d52:	0f 92       	push	r0
 d54:	11 24       	eor	r1, r1
 d56:	2f 93       	push	r18
 d58:	3f 93       	push	r19
 d5a:	4f 93       	push	r20
 d5c:	5f 93       	push	r21
 d5e:	6f 93       	push	r22
 d60:	7f 93       	push	r23
 d62:	8f 93       	push	r24
 d64:	9f 93       	push	r25
 d66:	af 93       	push	r26
 d68:	bf 93       	push	r27
 d6a:	ef 93       	push	r30
 d6c:	ff 93       	push	r31
	
	UARTDRE_GPTR () ;
 d6e:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <UARTDRE_GPTR>
 d72:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <UARTDRE_GPTR+0x1>
 d76:	09 95       	icall
}
 d78:	ff 91       	pop	r31
 d7a:	ef 91       	pop	r30
 d7c:	bf 91       	pop	r27
 d7e:	af 91       	pop	r26
 d80:	9f 91       	pop	r25
 d82:	8f 91       	pop	r24
 d84:	7f 91       	pop	r23
 d86:	6f 91       	pop	r22
 d88:	5f 91       	pop	r21
 d8a:	4f 91       	pop	r20
 d8c:	3f 91       	pop	r19
 d8e:	2f 91       	pop	r18
 d90:	0f 90       	pop	r0
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	0f 90       	pop	r0
 d96:	1f 90       	pop	r1
 d98:	18 95       	reti

00000d9a <__vector_15>:

// TX Complete
void __vector_15()__attribute__((signal));
void __vector_15()
{
 d9a:	1f 92       	push	r1
 d9c:	0f 92       	push	r0
 d9e:	0f b6       	in	r0, 0x3f	; 63
 da0:	0f 92       	push	r0
 da2:	11 24       	eor	r1, r1
 da4:	2f 93       	push	r18
 da6:	3f 93       	push	r19
 da8:	4f 93       	push	r20
 daa:	5f 93       	push	r21
 dac:	6f 93       	push	r22
 dae:	7f 93       	push	r23
 db0:	8f 93       	push	r24
 db2:	9f 93       	push	r25
 db4:	af 93       	push	r26
 db6:	bf 93       	push	r27
 db8:	ef 93       	push	r30
 dba:	ff 93       	push	r31
	UARTTXC_GPTR () ;	
 dbc:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <UARTTXC_GPTR>
 dc0:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <UARTTXC_GPTR+0x1>
 dc4:	09 95       	icall
}
 dc6:	ff 91       	pop	r31
 dc8:	ef 91       	pop	r30
 dca:	bf 91       	pop	r27
 dcc:	af 91       	pop	r26
 dce:	9f 91       	pop	r25
 dd0:	8f 91       	pop	r24
 dd2:	7f 91       	pop	r23
 dd4:	6f 91       	pop	r22
 dd6:	5f 91       	pop	r21
 dd8:	4f 91       	pop	r20
 dda:	3f 91       	pop	r19
 ddc:	2f 91       	pop	r18
 dde:	0f 90       	pop	r0
 de0:	0f be       	out	0x3f, r0	; 63
 de2:	0f 90       	pop	r0
 de4:	1f 90       	pop	r1
 de6:	18 95       	reti

00000de8 <__udivmodsi4>:
 de8:	a1 e2       	ldi	r26, 0x21	; 33
 dea:	1a 2e       	mov	r1, r26
 dec:	aa 1b       	sub	r26, r26
 dee:	bb 1b       	sub	r27, r27
 df0:	fd 01       	movw	r30, r26
 df2:	0d c0       	rjmp	.+26     	; 0xe0e <__udivmodsi4_ep>

00000df4 <__udivmodsi4_loop>:
 df4:	aa 1f       	adc	r26, r26
 df6:	bb 1f       	adc	r27, r27
 df8:	ee 1f       	adc	r30, r30
 dfa:	ff 1f       	adc	r31, r31
 dfc:	a2 17       	cp	r26, r18
 dfe:	b3 07       	cpc	r27, r19
 e00:	e4 07       	cpc	r30, r20
 e02:	f5 07       	cpc	r31, r21
 e04:	20 f0       	brcs	.+8      	; 0xe0e <__udivmodsi4_ep>
 e06:	a2 1b       	sub	r26, r18
 e08:	b3 0b       	sbc	r27, r19
 e0a:	e4 0b       	sbc	r30, r20
 e0c:	f5 0b       	sbc	r31, r21

00000e0e <__udivmodsi4_ep>:
 e0e:	66 1f       	adc	r22, r22
 e10:	77 1f       	adc	r23, r23
 e12:	88 1f       	adc	r24, r24
 e14:	99 1f       	adc	r25, r25
 e16:	1a 94       	dec	r1
 e18:	69 f7       	brne	.-38     	; 0xdf4 <__udivmodsi4_loop>
 e1a:	60 95       	com	r22
 e1c:	70 95       	com	r23
 e1e:	80 95       	com	r24
 e20:	90 95       	com	r25
 e22:	9b 01       	movw	r18, r22
 e24:	ac 01       	movw	r20, r24
 e26:	bd 01       	movw	r22, r26
 e28:	cf 01       	movw	r24, r30
 e2a:	08 95       	ret

00000e2c <_exit>:
 e2c:	f8 94       	cli

00000e2e <__stop_program>:
 e2e:	ff cf       	rjmp	.-2      	; 0xe2e <__stop_program>
